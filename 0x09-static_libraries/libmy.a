!<arch>
0-isupper.c/    0           0     0     644     304       `
#include "main.h"
/**
* _isupper - checks for uppercase character.
* @c: input character
* Return: 1 if c is uppercase or 0 otherwise
*/
int _isupper(int c)
{
char uppercase = 'A';
int isupper = 0;
for (; uppercase <= 'Z'; uppercase++)
{
if (c == uppercase)
{
isupper = 1;
break;
}
}
return (isupper);
}
0-memset.c/     0           0     0     644     310       `
#include "main.h"
/**
 * _memset - Program fills memory with a constant byte,
 * @s: memory area.
 * @b: constant byte.
 * @n: bytes filled.
 * Return: change array with value of a byte
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;

for (i = 0; i < n; i++)
*(s + i) =  b;

return (s);
}
0-strcat.c/     0           0     0     644     380       `
#include "main.h"
#include <stdio.h>

/**
* _strcat - Concatenates two strings
* @dest: The destination string
* @src: The source string
*
* Return: A pointer to the resulting string dest
*/
char *_strcat(char *dest, char *src)
{
int dlen = 0, i;

while (dest[dlen])
{
dlen++;
}

for (i = 0; src[i] != 0; i++)
{
dest[dlen] = src[i];
dlen++;
}

dest[dlen] = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     534       `
#include "main.h"

/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

while (*(s + count) != '\0')
{
if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
break;

if (*(s + count) == '-')
pn *= -1;

if ((*(s + count) >= '0') && (*(s + count) <= '9'))
{
if (size > 0)
m *= 10;
size++;
}
count++;
}

for (i = count - size; i < count; i++)
{
oi = oi + ((*(s + i) - 48) * m);
m /= 10;
}
return (oi  *pn);
}

1-isdigit.c/    0           0     0     644     170       `
#include "main.h"
/**
* _isdigit - checks for digits
* @c: character
*
* Return: 0 or 1
*/
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
return (1);
else
return (0);
}
1-memcpy.c/     0           0     0     644     317       `
#include "main.h"
/**
 * _memcpy - copies memory area,
 * @dest: destination memory area.
 * @src: source memory area.
 * @n: bytes filled.
 * Return: the pointer to dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;

for (i = 0; i < n; i++)
*(dest + i) =  *(src + i);

return (dest);
}

1-strncat.c/    0           0     0     644     366       `
#include "main.h"
/**
 * _strchr - program locates a character in a string,
 * @s: the string.
 * @c: the :wq
 * character.
 * Return: the pointer to the first occurrence of the character c.
 */
char *_strchr(char *s, char c)
{
unsigned int i = 0;

for (; *(s + i) != '\0'; i++)
if (*(s + i) == c)
return (s + i);
if (*(s + i) == c)
return (s + i);
return ('\0');
}
2-strlen.c/     0           0     0     644     267       `
#include "main.h"
/**
 * _strlen - program  function that returns the length of a string
 * @s: char input
 * Return: length of the input string
 */
int _strlen(char *s)
{
int i = 1, sum = 0;
char pl = s[0];
while (pl != '\0')
{
sum++;
pl = s[i++];
}
return (sum);
}

2-strncpy.c/    0           0     0     644     370       `
#include "main.h"

/**
  * _strncpy - it Copies string
  * @dest: The destination value
  * @src: The source value
  * @n: The copy limit
  *
  * Return: char value
  */
char *_strncpy(char *dest, char *src, int n)
{
int a = 0, b = 0;

while (src[b])
{
b++;
}

while (a < n && src[a])
{
dest[a] = src[a];
a++;
}

while (a < n)
{
dest[a] = '\0';
a++;
}

return (dest);
}
3-islower.c/    0           0     0     644     236       `
#include "main.h"
/**
* _islower - program function that checks for lowercase
* @c: single letter input
* Return: 1 if int c is lowercase, 0 if otherwise
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);
else
return (0);
}
3-puts.c/       0           0     0     644     208       `
#include "main.h"
/**
 * _puts - print a string
 * @str: string
 *
 * Return: the length of a string
 */
void _puts(char *str)
{
int i = 0;
while (str[i] != '\0')
{
_putchar(str[i]);
i++;
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     426       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: initial segment.
 * @accept: accepted bytes.
 * Return: the number of accepted bytes.
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int i, j, bool;

for (i = 0; *(s + i) != '\0'; i++)
{
	bool = 1;
for (j = 0; *(accept + j) != '\0'; j++)
{
if (*(s + i) == *(accept + j))
{
bool = 0;
break;
}
}
if (bool == 1)
break;
}
return (i);
}
3-strspn.c/     0           0     0     644     434       `
#include "main.h"

/**
 * _strspn - program gets the length of a prefix substring.
 * @s: initial segment.
 * @accept: accepted bytes.
 * Return: the number of accepted bytes.
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int i, j, bool;

for (i = 0; *(s + i) != '\0'; i++)
{
	bool = 1;
for (j = 0; *(accept + j) != '\0'; j++)
{
if (*(s + i) == *(accept + j))
{
bool = 0;
break;
}
}
if (bool == 1)
break;
}
return (i);
}
5-strstr.c/     0           0     0     644     600       `
#include "main.h"

/**
 * _strstr - program finds the first occurrence of the substring.
 * needle in the string haystack.
 * @haystack: entire string.
 * @needle: substring.
 * Return: pointer to the beginning of located substring or
 * NULL if the substring is not found.
*/
char *_strstr(char *haystack, char *needle)
{
char *bhaystack;
char *pneedle;

while (*haystack != '\0')
{
bhaystack = haystack;
pneedle = needle;

while (*haystack != '\0' && *pneedle != '\0' && *haystack == *pneedle)
{
haystack++;
pneedle++;
}
if (!*pneedle)
return (bhaystack);
haystack = bhaystack + 1;
}
return (0);
}
6-abs.c/        0           0     0     644     204       `
#include "main.h"
/**
* _abs - program function that compiles absolute value of an integer
* @ab: integer input
* Return: absolute value of ab
*/
int _abs(int ab)
{
return (ab * ((ab > 0) - (ab < 0)));
}
9-strcpy.c/     0           0     0     644     291       `
#include "main.h"
/**
 * char *_strcpy - program function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
int i = 0;
for (; src[i] != '\0'; i++)
{
dest[i] = src[i];
}
dest[i] = '\0';
return (dest);
}

isalpha.c/      0           0     0     644     285       `
#include "main.h"
/**
* _isalpha - program function that checks for alphabets
* @c: single letter input
* Return: 1 if c is a letter (lower or uppercase), 0 otherwise
*/
int _isalpha(int c)
{
if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')))
return (1);
else
return (0);
}

_putchar.c/     0           0     0     644     258       `
#include <unistd.h>
#include "main.h"

/**
* _putchar - writes the character c to stdout
* @c: The character to print
*
* Return: On success 1.
* On error, -1 is returned, and errno is set appropriately.
*/
int _putchar(char c)
{
return (write(1, &c, 1));
}
strpbrk.c/      0           0     0     644     465       `
#include "main.h"

/**
 * _strpbrk - program searches a string for any of a set of bytes.
 * @s: first string.
 * @accept: second string.
 * Return: a pointer to the byte in s that matches one of the
 * bytes in accept, or NULL if no such byte is found.
 */
char *_strpbrk(char *s, char *accept)
{
unsigned int i, j;

for (i = 0; *(s + i) != '\0'; i++)
{
for (j = 0; *(accept + j) != '\0'; j++)
{
if (*(s + i) == *(accept + j))
return (s + i);
}
}
return ('\0');
}

